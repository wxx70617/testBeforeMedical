#pragma version 10

smart_contracts.register.contract.Register.approval_program:
    // register/contract.py:16
    // class Register(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@5
    method "register(string,string,string,string,string,string,string,string)string"
    txna ApplicationArgs 0
    match main_register_route@2
    err // reject transaction

main_register_route@2:
    // register/contract.py:17
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // register/contract.py:16
    // class Register(ARC4Contract):
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    txna ApplicationArgs 4
    txna ApplicationArgs 5
    txna ApplicationArgs 6
    txna ApplicationArgs 7
    txna ApplicationArgs 8
    // register/contract.py:17
    // @arc4.abimethod()
    callsub register
    dup
    len
    itob
    extract 6 2
    swap
    concat
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_bare_routing@5:
    // register/contract.py:16
    // class Register(ARC4Contract):
    txn OnCompletion
    !
    assert // reject transaction
    txn ApplicationID
    !
    assert // is creating
    int 1
    return


// smart_contracts.register.contract.Register.register(id: bytes, name: bytes, sex: bytes, phone_number: bytes, password: bytes, address: bytes, account_address: bytes, mnemonic: bytes) -> bytes:
register:
    // register/contract.py:17-25
    // @arc4.abimethod()
    // def register(self, id: arc4.String,
    //              name: arc4.String,
    //              sex: arc4.String,
    //              phone_number: arc4.String,
    //              password: arc4.String,
    //              address: arc4.String,
    //              account_address: arc4.String,
    //              mnemonic: arc4.String) -> String:
    proto 8 1
    // register/contract.py:27
    // user = User(id, name, sex, phone_number, password, address, account_address, mnemonic)
    frame_dig -8
    len
    int 16
    +
    dup
    itob
    extract 6 2
    byte 0x0010
    swap
    concat
    swap
    frame_dig -7
    len
    +
    dup
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    frame_dig -6
    len
    +
    dup
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    frame_dig -5
    len
    +
    dup
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    frame_dig -4
    len
    +
    dup
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    frame_dig -3
    len
    +
    dup
    itob
    extract 6 2
    uncover 2
    swap
    concat
    swap
    frame_dig -2
    len
    +
    itob
    extract 6 2
    concat
    frame_dig -8
    concat
    frame_dig -7
    concat
    frame_dig -6
    concat
    frame_dig -5
    concat
    frame_dig -4
    concat
    frame_dig -3
    concat
    frame_dig -2
    concat
    frame_dig -1
    concat
    dup
    // register/contract.py:29
    // success = op.Box.create(id.bytes, user.bytes.length)
    len
    frame_dig -8
    swap
    box_create
    // register/contract.py:31
    // if success == False:
    bnz register_else_body@2
    // register/contract.py:32
    // return String("User registration failed because existed")
    byte "User registration failed because existed"
    swap
    retsub

register_else_body@2:
    // register/contract.py:34
    // op.Box.put(id.bytes, user.bytes)
    frame_dig -8
    frame_dig 0
    box_put
    // register/contract.py:35
    // return String("User registration success")
    byte "User registration success"
    swap
    retsub
